
Water Level.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b5  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000612  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00000eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dd  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:



void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
  6c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
  6e:	87 e8       	ldi	r24, 0x87	; 135
  70:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
  72:	80 e4       	ldi	r24, 0x40	; 64
  74:	87 b9       	out	0x07, r24	; 7
  76:	08 95       	ret

00000078 <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
  78:	97 b1       	in	r25, 0x07	; 7
  7a:	8f 70       	andi	r24, 0x0F	; 15
  7c:	98 2b       	or	r25, r24
  7e:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
  80:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	8a e1       	ldi	r24, 0x1A	; 26
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <ADC_Read+0x10>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <ADC_Read+0x16>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
  8e:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
  90:	85 b1       	in	r24, 0x05	; 5
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	98 2f       	mov	r25, r24
  96:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
  98:	82 0f       	add	r24, r18
  9a:	91 1d       	adc	r25, r1
  9c:	08 95       	ret

0000009e <main>:

int main(void)
{
	
	int value;
	DDRD=0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17

	ADC_Init();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
			value=ADC_Read(i);	/* Read ADC channel 0 */
			if(value>measure){
				PORTD=PORTD |(1<<i);
			}
			else{
				PORTD=PORTD & ~(1<<i);
  a6:	01 e0       	ldi	r16, 0x01	; 1
  a8:	10 e0       	ldi	r17, 0x00	; 0
	ADC_Init();
	
    int const measure=50;
    while (1) 
    {
		for(int i=3;i<6;i++){
  aa:	c3 e0       	ldi	r28, 0x03	; 3
  ac:	d0 e0       	ldi	r29, 0x00	; 0
			value=ADC_Read(i);	/* Read ADC channel 0 */
  ae:	8c 2f       	mov	r24, r28
  b0:	0e 94 3c 00 	call	0x78	; 0x78 <ADC_Read>
			if(value>measure){
  b4:	c3 97       	sbiw	r24, 0x33	; 51
  b6:	5c f0       	brlt	.+22     	; 0xce <main+0x30>
				PORTD=PORTD |(1<<i);
  b8:	22 b3       	in	r18, 0x12	; 18
  ba:	c8 01       	movw	r24, r16
  bc:	0c 2e       	mov	r0, r28
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x26>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <main+0x22>
  c8:	82 2b       	or	r24, r18
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <main+0x48>
			}
			else{
				PORTD=PORTD & ~(1<<i);
  ce:	92 b3       	in	r25, 0x12	; 18
  d0:	98 01       	movw	r18, r16
  d2:	0c 2e       	mov	r0, r28
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x3c>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <main+0x38>
  de:	82 2f       	mov	r24, r18
  e0:	80 95       	com	r24
  e2:	89 23       	and	r24, r25
  e4:	82 bb       	out	0x12, r24	; 18
	ADC_Init();
	
    int const measure=50;
    while (1) 
    {
		for(int i=3;i<6;i++){
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	c6 30       	cpi	r28, 0x06	; 6
  ea:	d1 05       	cpc	r29, r1
  ec:	01 f7       	brne	.-64     	; 0xae <main+0x10>
  ee:	dd cf       	rjmp	.-70     	; 0xaa <main+0xc>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
